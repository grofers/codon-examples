{{ define "sliceparamvalidator"}}
{{ if or .MinItems .MaxItems }}
{{ camelize .Name }}Size := int64(len({{ if and (not .IsArray) (not .HasDiscriminator) (not .IsInterface) (not .IsStream) .IsNullable }}*{{ end }}{{ .ValueExpression }}))
{{ end }}
{{ if .MinItems }}
if err := validate.MinItems({{ .Path }}, {{ printf "%q" .Location }}, {{ camelize .Name }}Size, {{ .MinItems }}); err != nil {
  return err
}
{{ end }}
{{ if .MaxItems }}
if err := validate.MaxItems({{ .Path }}, {{ printf "%q" .Location }}, {{ camelize .Name }}Size, {{.MaxItems}}); err != nil {
  return err
}
{{ end }}
{{ if .UniqueItems }}
if err := validate.UniqueItems({{ .Path }}, {{ printf "%q" .Location }}, {{ if and (not .IsArray) (not .HasDiscriminator) (not .IsInterface) (not .IsStream) .IsNullable }}*{{ end }}{{ .ValueExpression }}); err != nil {
  return err
}
{{ end }}
{{ if .Enum }}
if err := validate.Enum({{ .Path }}, {{ printf "%q" .Location }}, {{ if and (not .IsArray) (not .HasDiscriminator) (not .IsInterface) (not .IsStream) .IsNullable }}*{{ end }}{{ .ValueExpression }}, {{ .Enum }}); err != nil {
  return err
}
{{ end }}
{{ end }}
{{ define "propertyparamvalidator" }}
{{ if .IsPrimitive }}{{ template "validationPrimitive" . }}{{ end }}
{{ if .IsCustomFormatter }}
if err := validate.FormatOf({{.Path}}, "{{.Location}}", "{{.SwaggerFormat}}", {{.ValueExpression}}.String(), formats); err != nil {
  return err
}{{ end }}
{{ if .IsArray }}{{ template "sliceparamvalidator" . }}{{ end -}}
{{ end }}
{{define "bindprimitiveparam" }}
{{ end }}
{{ define "sliceparambinder" }}
var {{ varname .Child.ValueExpression }}R {{ .GoType }}
for {{ if or .Child.HasValidations .Child.Converter .Child.IsCustomFormatter }}{{ .IndexVar }}{{ else }}_{{ end }}, {{ varname .Child.ValueExpression }}V := range {{ varname .Child.ValueExpression }}C {
  {{ if or .Child.IsArray -}}
  {{ .Child.Child.ValueExpression }}C := swag.SplitByFormat({{ varname .Child.ValueExpression }}V, {{ printf "%q" .Child.CollectionFormat }})
  {{ template "sliceparambinder" .Child }}
  {{- else -}}
  {{ if .Child.Converter -}}
  {{ varname .Child.ValueExpression }}, err := {{ .Child.Converter }}({{ varname .Child.ValueExpression }}V)
  if err != nil {
    return errors.InvalidType({{ .Child.Path }}, {{ printf "%q" .Child.Location }}, "{{ .Child.GoType }}", {{ varname .Child.ValueExpression }})
  }
  {{- else if .Child.IsCustomFormatter -}}
  {{ varname .Child.ValueExpression }}, err := formats.Parse({{ varname .Child.ValueExpression }}V)
  if err != nil {
    return errors.InvalidType({{ .Child.Path }}, {{ printf "%q" .Child.Location }}, "{{ .Child.GoType }}", {{ varname .Child.ValueExpression }})
  }
  {{- else -}}
  {{ varname .Child.ValueExpression }} := {{ varname .Child.ValueExpression }}V
  {{ end }}
  {{- end }}

  {{ template "propertyparamvalidator" .Child }}
  {{ varname .Child.ValueExpression }}R = append({{ varname .Child.ValueExpression }}R, {{ varname .Child.ValueExpression }})
}
{{ end }}
package {{ .Package }}

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
  "net/http"

  "github.com/go-openapi/errors"
  "github.com/go-openapi/validate"
  "github.com/go-openapi/runtime"
  "github.com/go-openapi/runtime/middleware"
  "github.com/go-openapi/swag"

  strfmt "github.com/go-openapi/strfmt"

  {{ range .DefaultImports }}{{ printf "%q" .}}
  {{ end }}
  {{ range $key, $value := .Imports }}{{ $key }} {{ printf "%q" $value }}
  {{ end }}
)

// New{{ pascalize .Name }}Params creates a new {{ pascalize .Name }}Params object
// with the default values initialized.
func New{{ pascalize .Name }}Params() {{ pascalize .Name }}Params {
  var (
  {{ range .Params }}{{ if .HasDefault }}{{ if not .IsFileParam }}{{ varname .ID}}Default = {{ if .IsPrimitive}}{{.GoType}}({{ end}}{{ printf "%#v" .Default }}{{ if .IsPrimitive }}){{ end }}
  {{ end }}{{ end }}{{end}}
  )
  return {{ pascalize .Name }}Params{
    Params: map[string]interface{} {
      {{ range .Params }}{{ if .HasDefault }}
      {{.Path}}: {{ if and (not .IsArray) (not .HasDiscriminator) (not .IsInterface) (not .IsStream) .IsNullable }}&{{ end }}{{ varname .ID }}Default,
      {{ end }}{{ end }}
    },
  }
}

// {{ pascalize .Name }}Params contains all the bound params for the {{ humanize .Name }} operation
// typically these are obtained from a http.Request
//
// swagger:parameters {{ .Name }}
type {{ pascalize .Name }}Params struct {

  // HTTP Request Object
  HTTPRequest *http.Request

  Params map[string]interface{}
}

// GetParamsMap returns the parameters in a map format with original names
// as keys.
func ({{ .ReceiverName }} *{{ pascalize .Name }}Params) GetParamsMap() (map[string]interface{}, error) {
  return o.Params, nil
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func ({{ .ReceiverName }} *{{ pascalize .Name }}Params) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
  var res []error
  {{ .ReceiverName }}.HTTPRequest = r

  {{ if .HasQueryParams }}qs := runtime.Values(r.URL.Query()){{ end }}

  {{ if .HasFormParams }}if err := r.ParseMultipartForm(32 << 20); err != nil {
		if err != http.ErrNotMultipart {
            return err
        } else if err := r.ParseForm(); err != nil {
            return err
        }
	}{{ if .HasFormValueParams }}
  fds := runtime.Values(r.Form)
  {{ end }}{{ end }}

  {{ range .Params }}
  {{ if not .IsArray }}{{ if .IsQueryParam }}q{{ pascalize .Name }}, qhk{{ pascalize .Name }}, _ := qs.GetOK({{ .Path }})
  if err := {{ .ReceiverName }}.bind{{ pascalize .ID }}(q{{ pascalize .Name }}, qhk{{ pascalize .Name }}, route.Formats); err != nil {
    res = append(res, err)
  }
  {{ else if .IsPathParam }}r{{ pascalize .Name }}, rhk{{ pascalize .Name }}, _ := route.Params.GetOK({{ .Path }})
  if err := {{ .ReceiverName }}.bind{{ pascalize .ID }}(r{{ pascalize .Name }}, rhk{{ pascalize .Name }}, route.Formats); err != nil {
    res = append(res, err)
  }
  {{ else if .IsHeaderParam }}if err := {{ .ReceiverName }}.bind{{ pascalize .ID }}(r.Header[http.CanonicalHeaderKey({{ .Path }})], true, route.Formats); err != nil {
    res = append(res, err)
  }
  {{ else if .IsFormParam }}{{if .IsFileParam }}{{ camelize .Name }}, {{ camelize .Name }}Header, err := r.FormFile({{ .Path }})
  if err != nil {
    res = append(res, errors.New(400, "reading file %q failed: %v", {{ printf "%q" (camelize .Name) }}, err))
  } else {
    {{ .ReceiverName }}.Params["{{ .Name }}"] = runtime.File{Data: {{ camelize .Name }}, Header: {{ camelize .Name }}Header}
  }
  {{ else }}fd{{ pascalize .Name }}, fdhk{{ pascalize .Name }}, _ := fds.GetOK({{ .Path }})
  if err := {{ .ReceiverName }}.bind{{ pascalize .ID }}(fd{{ pascalize .Name }}, fdhk{{ pascalize .Name }}, route.Formats); err != nil {
    res = append(res, err)
  }
  {{ end }}{{ end }}
  {{ else if .IsArray }}{{ if .IsQueryParam }}q{{ pascalize .Name }}, qhk{{ pascalize .Name }}, _ := qs.GetOK({{ .Path }})
  if err := {{ .ReceiverName }}.bind{{ pascalize .ID }}(q{{ pascalize .Name }}, qhk{{ pascalize .Name }}, route.Formats); err != nil {
    res = append(res, err)
  }
  {{ else if and .IsFormParam }}fd{{ pascalize .Name }}, fdhk{{ pascalize .Name }}, _ := fds.GetOK({{ .Path }})
  if err := {{ .ReceiverName }}.bind{{ pascalize .ID }}(fd{{ pascalize .Name }}, fdhk{{ pascalize .Name }}, route.Formats); err != nil {
    res = append(res, err)
  }
  {{ end }}{{ end }}

  {{ if and .IsBodyParam .Schema }}if runtime.HasBody(r) {
  {{ if .Schema.IsStream }}{{ .ReceiverName }}.Params["{{ .Name }}"] = r.Body
  {{ else }}defer r.Body.Close()
  {{ if and .Schema.IsBaseType .Schema.IsExported }}body, err := {{ .ModelsPackage }}.Unmarshal{{ stripPackage .GoType .ModelsPackage }}{{ if .IsArray }}Slice{{ end }}(r.Body, route.Consumer)
  if err != nil { {{ if .Required }}
    if err == io.EOF {
      err = errors.Required({{ .Path }}, {{ printf "%q" .Location }})
    }
    {{ end }}res = append(res, err)
  {{ else }}var body {{ .GoType }}
  if err := route.Consumer.Consume(r.Body, &body); err != nil { {{ if .Required }}
    if err == io.EOF {
      res = append(res, errors.Required({{ printf "%q" (camelize .Name) }}, {{ printf "%q" .Location }}))
    } else { {{ end }}
    res = append(res, errors.NewParseError({{ printf "%q" (camelize .Name) }}, {{ printf "%q" .Location }}, "", err)){{ if .Required }}
    }
    {{ end }}
  {{ end }}} else {
    {{ if .IsArray }}{{ if .Child }}{{ if (and (not .Schema.IsInterface) (or .Child.IsAliased .Child.IsComplexObject)) }}for _, {{ .IndexVar }}{{ .ReceiverName }} := range {{ .ReceiverName }}.Params["{{ .Name }}"] {
      if err := {{ .IndexVar }}{{ .ReceiverName }}.Validate(route.Formats); err != nil {
        res = append(res, err)
        break
      }
    }
    {{ end }}{{ end }}{{ else if (and (not .Schema.IsInterface) (or .Schema.IsAliased .Schema.IsComplexObject)) }}if err := body.Validate(route.Formats); err != nil {
      res = append(res, err)
    }
    {{ end }}
    if len(res) == 0 {
      {{ .ReceiverName }}.Params["{{ .Name }}"] = {{ if and (not .Schema.IsBaseType) .IsNullable }}&{{ end }}body
    }
  }
  {{ end }}
  }{{ if .Required }} else {
    res = append(res, errors.Required({{ printf "%q" (camelize .Name) }}, {{ printf "%q" .Location }}))
  }  {{ end }}

  {{ end }}
  {{ end }}
  if len(res) > 0 {
    return errors.CompositeValidationError(res...)
  }
  return nil
}

{{ $className := (pascalize .Name) }}
{{ range .Params }}
{{ $receiverName := .ReceiverName }}
{{ if not (or .IsBodyParam .IsFileParam) }}
{{ if or .IsPrimitive .IsCustomFormatter }}
func ({{ .ReceiverName }} *{{ $className }}Params) bind{{ pascalize .ID }}(rawData []string, hasKey bool, formats strfmt.Registry) error {
  {{ if and (not .IsPathParam) .Required }}if !hasKey {
    return errors.Required({{ .Path }}, {{ printf "%q" .Location }})
  }
  {{ end }}var raw string
  if len(rawData) > 0 {
    raw = rawData[len(rawData)-1]
  }
  {{ if and (not .IsPathParam) .Required (not .AllowEmptyValue) }}if err := validate.RequiredString({{ .Path }}, {{ printf "%q" .Location }}, raw); err != nil {
    return err
  }
  {{ else if and ( not .IsPathParam ) (or (not .Required) .AllowEmptyValue) }}if raw == "" { // empty values pass all other validations
    {{ if .HasDefault }}var {{ camelize .Name}}Default {{ if not .IsFileParam }}{{ .GoType }}{{ else }}os.File{{end}} = {{ if .IsPrimitive}}{{.GoType}}({{ end}}{{ printf "%#v" .Default }}{{ if .IsPrimitive }}){{ end }}
    {{$receiverName}}.Params[{{.Path}}] = {{ if and (not .IsArray) (not .HasDiscriminator) (or .IsNullable  ) (not .IsStream) }}&{{ end }}{{ camelize .Name }}Default
    {{ end }}return nil
  }
  {{ end }}
  {{ if .Converter }}value, err := {{ .Converter }}(raw)
  if err != nil {
    return errors.InvalidType({{ .Path }}, {{ printf "%q" .Location }}, {{ printf "%q" .GoType }}, raw)
  }
  {{$receiverName}}.Params[{{.Path}}] = {{ if .IsNullable }}&{{ end }}value
  {{ else if .IsCustomFormatter }}value, err := formats.Parse({{ printf "%q" .SwaggerFormat }}, raw)
  if err != nil {
    return errors.InvalidType({{ .Path }}, {{ printf "%q" .Location }}, {{ printf "%q" .GoType }}, raw)
  }
  {{$receiverName}}.Params[{{.Path}}] = {{ if and (not .IsArray) (not .HasDiscriminator) (not .IsFileParam) (not .IsStream) (not .IsNullable) }}*{{ end }}(value.(*{{ .GoType }}))
  {{else}}{{$receiverName}}.Params[{{.Path}}] = {{ if .IsNullable }}&{{ end }}raw
  {{ end }}
  {{if .HasValidations }}if err := {{ .ReceiverName }}.validate{{ pascalize .ID }}(formats); err != nil {
    return err
  }
  {{ end }}
  return nil
}
{{else if .IsArray}}
func ({{ .ReceiverName }} *{{ $className }}Params) bind{{ pascalize .ID }}(rawData []string, hasKey bool, formats strfmt.Registry) error {
  {{if .Required }}if !hasKey {
    return errors.Required({{ .Path }}, {{ printf "%q" .Location }})
  }
  {{ end }}
  {{ if eq .CollectionFormat "multi" }}{{ varname .Child.ValueExpression }}C := rawData{{ else }}var qv{{ pascalize .Name }} string
  if len(rawData) > 0 {
    qv{{ pascalize .Name }} = rawData[len(rawData) - 1]
  }

  {{ varname .Child.ValueExpression }}C := swag.SplitByFormat(qv{{ pascalize .Name }}, {{ printf "%q" .CollectionFormat }}){{ end }}
  {{if and .Required (not .AllowEmptyValue) }}
  if len({{ varname .Child.ValueExpression }}C) == 0 {
    return errors.Required({{ .Path }}, {{ printf "%q" .Location }})
  }
  {{ end }}
  {{ if not .Required }}{{ if .HasDefault }}defValue := swag.SplitByFormat({{ .Default }}, {{ printf "%q" .CollectionFormat }})
  if len({{ varname .Child.ValueExpression }}C) == 0 && len(defValue) > 0 {
    {{$receiverName}}.Params[{{.Path}}] = defValue
  {{ else }}if len({{ varname .Child.ValueExpression }}C) == 0 {
    return nil{{ end }}
  }{{ end }}
  {{ template "sliceparambinder" . }}
  {{$receiverName}}.Params[{{.Path}}] = {{ varname .Child.ValueExpression }}R
  {{ if .HasSliceValidations }}if err := {{ .ReceiverName }}.validate{{ pascalize .ID }}(formats); err != nil {
    return err
  }
  {{ end }}

  return nil
}
{{ end }}
{{ if or .HasValidations .HasSliceValidations }}
func ({{ .ReceiverName }} *{{ $className }}Params) validate{{ pascalize .ID }}(formats strfmt.Registry) error {
  {{ template "propertyparamvalidator" . }}
  return nil
}
{{ end }}
{{ end }}
{{ end }}
